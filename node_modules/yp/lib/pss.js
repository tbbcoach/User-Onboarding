/**
 * Created by yuji on 2015/10/28.
 * const 表示不会改变也不应该改变的对象
 */
'use strict';

//  shim for proxy
require('harmony-reflect');

const deps = require('./deps');
const FileObjCache = require('./file-object');
const map = require('./map');
const init = require('./file-list').allFileList;
const vc = require('./file-list').streamFileList;
const config = require('./config');
const log = require('./log');
const co = require('co');
const lang = require('./lang');

const startTime = Date.now();


module.exports = configures => {
  config.setConfig(configures);

  const fileObjCache = new Proxy(new FileObjCache(config.rootPath, config.outdir), {
    get(target, property) {
      if (!target.hasOwnProperty(property)) {
        FileObjCache.prototype.addAFile.call(target, property);
      }
      return target[property];
    },
  });
  co(function*() {
    let mapJson;
    let fileListByVc;

    //  用于生成resourcesMap

    try {
      mapJson = require(config.mapJsonPath);
      fileListByVc = yield vc();
    } catch (e) {
      fileListByVc = init();
      mapJson = { res: {} };
    } finally {
      log.log('已更改文件数：', fileListByVc.length);
    }
    return { mapJson, fileListByVc };
  }).then(({ fileListByVc, mapJson }) => {
    // 因为没有更改的文件自身的依赖是不会改变的
    // 所以抽取依赖只需要抽取改变的文件的依赖
    const rm = map.ResourceMap.initFromObj(mapJson, config.uriConfig);
    const addDep = fileName => rm.setDep(fileName, fileObjCache[fileName].processor('dependency'));
    fileListByVc.map(addDep);
    const finalList = deps.recalFileList(fileListByVc, map.ReverseMap.genByResourceMap(rm));
    lang.mapSet(finalList, addDep);
    return { rm, finalList };
  }).then(({ rm, finalList }) => {


    // 记录文件日志
    (finalFileList => {
      let fileToCompile = 0;
      lang.mapSet(finalFileList, theItem => {
        log.log(`${theItem} 被读入构建列表`);
        fileToCompile += 1;
      });
      log.log(`需要构建文件数：${fileToCompile}`);
    })(finalList);
// 根据resourceMap和变化的文件列表，生成有序依赖表
// 也就是需要按序重新构建的文件列表
    const orderlyDeps = deps.orderlyDeps(finalList, rm);
    const nameArr = orderlyDeps.map(item => {
      fileObjCache[item].processor('dependency');
      fileObjCache[item].insertUri(rm.uriMap);
      const resourceName = fileObjCache[item].setHash();
      rm.setUri(item, resourceName);
      return fileObjCache[item].save();
    });
    return { rm, nameArr };
  }).then(({ nameArr, rm }) => {
    nameArr.map(fileInfo => log.log(`${fileInfo.relativeName} 处理完毕`));
    rm.save(config.mapJsonPath);
    log.out(config._mapJsonPath);
  }).then(() => log.log(`consumed: ${Date.now() - startTime}ms`))
    .catch(err => {
      log.out(err);
      log.error(err);
    });
};

