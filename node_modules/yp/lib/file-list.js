/**
 * Created by yuji on 2015/10/28.
 */
'use strict';
const config = require('./config');
const util = require('./util');
const os = require('os');
const path = require('./path');
const log = require('./log');
const fs = require('fs');

/**
 * 根据版本控制软件生成文件列表
 * 这货这么写是因为坑爹的单元测试难写
 * @returns {Promise}
 */
const fileListFromInputStream = (inputStream = process.stdin) => {
  const fileListFromStandardInputPromise = new Promise(resolve => {
    let arr = [];

    inputStream.setEncoding('utf8');

    inputStream.on('readable', () => {
      const chunk = inputStream.read();
      if (chunk !== null) {
        arr = arr.concat(chunk.split(os.EOL));
      }
    });

    inputStream.on('end', () => {
      resolve(arr.filter(item => !!item));
    });
  });
  return new Promise(resolve => {
    fileListFromStandardInputPromise.then(changedFileList => {
      const result = util.filter(changedFileList, config.dir, config.ignore, util.copyFile2OutDir);
      resolve(result);
    });
    inputStream.resume();
  });
};


const reduceFunc = (reg, fileName, outdir, leftFunc) => {
  if (!reg.test(fileName)) {
    return true;
  }
  if (config.leaveFileLog) {
    log.out(path.join(outdir, fileName));
  }
  leftFunc(fileName);
  return false;
};

function getRelativeFileName(name) {
  return path.isAbsolute(name) ?
    path.relative(config.rootPath, name) :
    name;
}

//  获取所有需要构建的文件列表
const allFiles = function (requireDirs, ignoreDirs, rootPath, outdir, leftFunc) {
  if (requireDirs.length !== ignoreDirs.length) {
    throw new Error("Wrong config!\n dirs'es length should equals ignore_dirs'es length");
  }
  const allDirs = fs.readdirSync(rootPath);
  const result = [];
  const ignoreRegexArray = ignoreDirs.map(ignores => ignores.map(ignore => new RegExp(ignore)));

  return allDirs.reduce((past, dirName) => {
    const relativeDirName = getRelativeFileName(dirName);
    const index = requireDirs.indexOf(relativeDirName);
    if (index === -1) {
      util.executeCopy(relativeDirName);
      return past;
    }
    const shouldInclude = (fileName, ignoreRegex) => {
      const relativeFileName = getRelativeFileName(fileName);
      return ignoreRegex.reduce((before, reg) =>
        !before ? false : reduceFunc(reg, relativeFileName, outdir, leftFunc), true);
    };
    return path.listFiles(path.join(rootPath, relativeDirName))
      .filter(fileName => shouldInclude(fileName, ignoreRegexArray[index]))
      .map(x => path.relative(config.rootPath, x))
      .concat(past);
  }, result);
};

module.exports = {
  streamFileList: fileListFromInputStream,
  allFileList: () =>
    allFiles(config.dir, config.ignore, config.rootPath, config.outdir, util.copyFile2OutDir),
};

