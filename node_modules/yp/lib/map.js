/**
 * Created by yuji on 2015/10/28.
 */

'use strict';
//  shim for proxy
require('harmony-reflect');
const fs = require('fs');
const lang = require('./lang');
const log = require("./log");

class ResourceMap {
  constructor(map, uriConfig) {
    this.map = map || { res: {} };
    this.map.uriConfig = uriConfig;
    const ctx = this;
    this.uriMap = new Proxy({}, {
      //  惰性求值
      get(target, property) {
        if (!lang.hasProp(target, property)) {
          target[property] = ctx.map.res[property].uri;
        }
        return target[property];
      },
    });
  }

  /**
   *  会将对象中的deps转换为Set
   * @param obj
   * @param uriConfig
   * @returns {ResourceMap}
   */
  static initFromObj(obj, uriConfig) {
    lang.mapObject(obj.res, (key, value) => {
      obj.res[key].deps = new Set(value.deps);
    });
    return new ResourceMap(obj, uriConfig);
  }

  uri(name) {
    return this.map.res[name].uri;
  }

  setUri(name, uri) {
    if (this.map.res.hasOwnProperty(name)) {
      this.map.res[name].uri = uri;
    } else {
      //@TODO 不太正确
      this.map.res[name] = {
        uri: '',
        deps: new Set(),
      };
      log.error('设置资源表中的uri时，引用了未声明的资源名:', name);
    }
    return this;
  }

  deps(name) {
    if (!this.map.res.hasOwnProperty(name)) {
      return new Set();
    }
    return this.map.res[name].deps;
  }

  setDep(name, deps) {
    if (this.map.res.hasOwnProperty(name)) {
      this.map.res[name].deps = new Set(deps);
    } else {
      this.map.res[name] = {
        uri: '',
        deps: new Set(),
      };
      return this.setDep(name, deps);
    }
    return this;
  }

  toNormalObj() {
    const normalMapRes = lang.mapObject(this.map.res, (key, value) => ({
      uri: value.uri,
      deps: lang.set2array(value.deps),
    }));
    this.normalMap = {
      res: normalMapRes,
      uri: this.map.uriConfig,
    };
    return this.normalMap;
  }

  save(name) {
    this.toNormalObj();
    fs.writeFileSync(name, JSON.stringify(this.normalMap));
    return this;
  }
}

class ReverseMap {
  constructor(obj) {
    this.map = obj || {};
  }

  static genByResourceMap(resourceMap) {
    const reverseMap = new ReverseMap();
    // 没有被依赖的，最后不会出现在依赖表里面
    lang.mapObject(resourceMap.map.res, (key, value) => {
      lang.mapSet(value.deps, item => reverseMap.addDep(item, key));
    });
    return reverseMap;
  }

  addDep(name, depBy) {
    if (lang.hasProp(this.map, name)) {
      this.map[name].add(depBy);
    } else {
      this.map[name] = new Set();
      this.addDep(name, depBy);
    }
    return this;
  }
}

module.exports = {
  ReverseMap,
  ResourceMap,
};

