/**
 * Created by aesop on 2016/2/1.
 */

'use strict';
const should = require('chai').should(),
    vc = require('../lib/file-list').streamFileList,
    config = require('../lib/config'),
    exec = require('child_process').execSync,
    os = require('../lib/os');

//只能把那货参数化了
describe('version control module ', function () {
    let defaultConfig = JSON.stringify(config);
    before(function () {
        config.setConfig({
            rootPath: 'test/sample',
            outdir: 'd',
            "ignore": [[], [], [".html$", ".php$"]],
            "dir": ["images", "css", "php"],
            leaveFileLog: false
        });
    });
    after(function () {
        os.delCommad.map(x=>exec(x+ config.rootPath + os.partedSymbol + os.parentDir +config.outdir));
        config.setConfig(JSON.parse(defaultConfig));
    });
    it('#should return ar array of files from stdin', function () {
        let expectResult = ['images/a.jpg', 'images/b.png', 'css/style.css'];
        let stdinStub = {
            out: [['images/a.jpg', 'images/b.png'].join(os.EOL), 'css/style.css', 'php/index.php'],
            setEncoding(){

            },
            on(stage, cb){
                if (stage === 'readable') {
                    this.readableCb = cb;
                }
                else if (stage === 'end') {
                    this.endCb = cb;
                }
            },
            read(){
                if (this.out.length) {
                    process.nextTick(()=> {
                        this.readableCb();
                    });
                    return this.out.shift();
                }
                else {
                    process.nextTick(()=> {
                        this.endCb();
                    });
                    return null;
                }
            },
            resume(){
                process.nextTick(()=> {
                    this.readableCb();
                });
            }
        };
        return vc(stdinStub).then(function (result) {
            result.should.deep.equal(expectResult);
        });
    });
});