/**
 * Created by yuji on 2015/11/12.
 */
'use strict';
let should = require("chai").should(),
    config = require('../lib/config'),
    os = require('../lib/os');

let conf = {
    "rootPath": ".",
    "uriConfig": {
        "baseUri": "192.168.83.129:8080",
        "protocol": "http://",
        "suffix": "?v=1"
    },
    "ignore": [[], [], [".html$", ".php$"]],
    "dir": ["images", "css", "php"],
    "mapJsonPath": "../dist/map.json",
    "outdir": "dist",
    'logdir': [process.cwd(), 'test', 'log'].join(os.partedSymbol),
    'logLevel': 1
};

describe("config", function () {
    describe("#defaultConfig", function () {
        it('mapJsonPath should be equal "../dist/map.json" on posix and "..\\dist\\map.json" on win32', function () {
            if (os.os !== 'windows') {
                config.mapJsonPath.should.equal("../dist/map.json");
            }
            else {
                config.mapJsonPath.should.equal("..\\dist\\map.json");
            }
        });
        it('logdir should be equal system specified path', function () {
            config.logdir.should.equal(os.usualLogDir);
        });
        it('rootPath should be equal system specified path', function () {
            config.rootPath.should.be.equal('.');
        });
    });
    describe('#customConfig', function () {
        let defaultConfig;
        before(function () {
            defaultConfig = JSON.stringify(config);
            config.setConfig(conf);
        });
        after(function () {
            config.setConfig(JSON.parse(defaultConfig));
        });
        it('map json path should be equal system specified path', function () {
            if (os.os !== 'windows') {
                config.mapJsonPath.should.be.equal('../../dist/map.json')
            }
            else {
                config.mapJsonPath.should.be.equal('..\\..\\dist\\map.json')
            }
            config.logdir.should.equal([process.cwd(), 'test', 'log'].join(os.partedSymbol))
        });
    });
    describe('#customConfig with absolute path', function(){
        let defaultConfig;
        let mapJsonPath = [process.cwd(), 'map.json'].join(os.partedSymbol);
        before(function () {
            defaultConfig = JSON.stringify(config);
            config.setConfig({
                mapJsonPath: mapJsonPath
            });
        });
        after(function () {
            config.setConfig(JSON.parse(defaultConfig));
        });
        it('should return the mapjsonpath as it given', function(){
            config.mapJsonPath.should.equal(mapJsonPath);
        });
    })

});
