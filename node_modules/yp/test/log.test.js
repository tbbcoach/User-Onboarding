/**
 * Created by aesop on 2016/2/4.
 */
'use strict';
const should = require('chai').should;
const log = require('../lib/log'),
    config = require('../lib/config'),
    part = require('../lib/os').partedSymbol,
    fs = require('fs'),
    os = require('../lib/os');


describe('log module', function () {
    let defaultConfig;
    let logDir;
    before(function () {
        defaultConfig = JSON.stringify(config);
        logDir = [process.cwd(), 'test', 'pss-log'].join(part);
        config.setConfig({
            'logdir': logDir
        });
    });

    after(function () {
        config.setConfig(JSON.parse(defaultConfig));
    });
    [0, 1, 2].map(function (value) {
        describe('#log level ' + value, function () {

            before(function () {
                config.setConfig({
                    'logLevel': value
                })
            });
            it('should record level specified logs', function (done) {
                let logName = log.log('well');
                log.warn('warn');
                log.error('error');
                setTimeout(function () {
                    let result = fs.readFileSync(logName).toString();
                    [/\[info\]/, /\[warn\]/, /\[error\]/].slice(value).map(x=>result.should.match(x));
                    done();
                }, 10);
            })
        })
    });
});

describe('log module', function () {
    describe('#out(custom console log function)', function () {
        let result = [];
        let outStream = {
            result: [],
            write: str=> {
                result.push(str);
            },
            input: [['Hello,', 'world!'], ['this way!']],
            expectResult: [['Hello,', 'world!', ''].join(os.EOL), 'this way!' + os.EOL]
        };
        before(function () {
            config.setConfig({
                'outStream': outStream
            });
        });
        after(function () {
            config.setConfig({
                'outStream': null
            });
        });
        it('should break lines while given multiple arguments', function () {
            outStream.input.map(x=>log.out.apply(log, x));
            result.should.deep.equal(outStream.expectResult);
        });
    });
});