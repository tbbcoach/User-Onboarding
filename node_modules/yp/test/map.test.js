/**
 * Created by aesop on 2016/2/1.
 */
'use strict';
const should = require('chai').should;
const map = require('../lib/map'),
    lang = require('../lib/lang'),
    fs = require('fs');

describe('map module: ', function () {
    let uriConfig = {
            "baseUri": "192.168.83.129:8080",
            "protocol": "http://",
            "suffix": "?v=1"
        },
        sharedRm, deps, uri, normalMap,
        obj = {
            'res': {
                'test':{
                    deps: [],
                    uri:''
                }
            }
        };
    sharedRm = map.ResourceMap.initFromObj(obj, uriConfig);
    deps = {
        'tpl/a.tpl': ['css/a.css', 'css/b.css'],
        'css/a.css': ['image/a.png', 'image/val/1.gif'],
        'css/b.css': ['image/a.png', 'image/c.jpg'],
        'image/a.png': [],
        'image/val/1.gif': [],
        'iamge/c.jpg': [],
        'test': []
    };
    uri = {
        'tpl/a.tpl': '/tpl/a_v12345.tpl',
        'css/a.css': '/css/a_v12321.css',
        'css/b.css': '/css/b_v223df.css',
        'image/a.png': '/image/a_v23124f.png',
        'image/val/1.gif': '/image/val/1_v21344f.gif',
        'iamge/c.jpg': '/image/c_v123edf.jpg',
        'test': ''
    };
    normalMap = {
        'uri': uriConfig,
        "res": lang.mapObject(deps, function (key, value) {
            return {
                deps: value,
                uri: uri[key]
            }
        })
    };

    describe('#ResourceMap with empty initiation:', function () {

        describe('#static method initFromObj', function () {
            it('should return a instance of ResourceMap', function () {
                sharedRm.should.be.instanceOf(map.ResourceMap)
            });
        });
        describe('#deps ', function () {
            it('should return this when set ', function () {
                lang.mapObject(deps, function (key, value) {
                    sharedRm.setDep(key, value).should.be.instanceOf(map.ResourceMap);
                });
            });
            it('should return what passed to when get ', function () {
                lang.mapObject(deps, function (key, value) {
                    Array.from(sharedRm.deps(key)).should.deep.equal(value);
                });
            })
        });
        describe('#set uri', function () {
            it('should return this when set', function () {
                lang.mapObject(uri, function (key, value) {
                    sharedRm.setUri(key, value).should.be.instanceOf(map.ResourceMap);
                });
            });
            it('should return what passed to when get ', function () {
                lang.mapObject(uri, function (key, value) {
                    sharedRm.uri(key).should.equal(value);
                });
                lang.mapObject(uri, function (key, value) {
                    sharedRm.uriMap[key].should.equal(value);
                });
            });
            it('should throw error when passed a non-existed key', function () {
                let exception = false;
                try {
                    sharedRm.setUri('hello??', 'a');
                }
                catch (e) {
                    exception = true;
                }
                finally {
                    if(!exception){
                        throw new Error();
                    }
                }
            });
        });
        describe('#to normal map', function () {
            it('should be a plat map ', function () {
                sharedRm.toNormalObj().should.deep.equal(normalMap);
            })
        });
        describe('#save', function () {
            let fileName = 'test/map.json';
            after(function () {
                fs.unlink(fileName);
            });
            it('should synchronously save to map json', function () {
                sharedRm.save(fileName);
                JSON.parse(fs.readFileSync(fileName).toString()).should.deep.equal(normalMap);
            });
        });
        describe('#ReverseMap', function () {
            let rm;
            let result = {
                'css/a.css': ['tpl/a.tpl'],
                'css/b.css': ['tpl/a.tpl'],
                'image/a.png': ['css/a.css', 'css/b.css'],
                'image/val/1.gif': ['css/a.css'],
                'image/c.jpg': ['css/b.css']
            };
            describe('#init from ResourceMap', function () {
                before(function () {
                    rm = map.ReverseMap.genByResourceMap(sharedRm);
                });
                it('should be a instanceof ReverseMap', function () {
                    rm.should.be.instanceOf(map.ReverseMap);
                });
                it('reverse map should be right', function () {
                    lang.mapObject(rm.map, (key, value)=>Array.from(value)).should.deep.equal(result);
                });
            });
        });
    });


});
