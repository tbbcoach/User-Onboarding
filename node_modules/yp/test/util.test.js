/**
 * Created by yuji on 2015/11/12.
 */
'use strict';
const should = require('chai').should(),
    util = require('../lib/util'),
    config = require('../lib/config'),
    fs = require('fs'),
    path = require('../lib/path'),
    os = require('../lib/os'),
    exec = require('child_process').execSync;

describe('util', function () {

    describe('#new File', function () {

        let fileInfo = ['test.txt'],
            outDir;
        before(function () {
            config.setConfig({
                rootPath: 'test/files'
            });
            outDir = config.rootPath + os.partedSymbol + os.parentDir + config.outdir;
        });
        after(function () {
            config.setConfig({
                rootPath: '.'
            });
            fileInfo.map(x=>{
                fs.unlinkSync(outDir + os.partedSymbol + x);
            })
            fs.rmdirSync(outDir);
        });
        it('should return an array with its oldName and new Name', function () {
            util.copyFile2OutDir.apply({}, fileInfo).should.equal(false);
            fileInfo.map(x=>{
                console.log(outDir + os.partedSymbol + x)
                fs.existsSync(outDir + os.partedSymbol + x).should.equal(true);
            });

        });
    });

    describe('#filter ', function () {
        it('should rightly return files when given right args.', function () {
            let arr = [[
                'a/b.js',
                'b/c/d.js',
                'b/d/e.css',
                'c/d.png'
            ],
                [
                    'b',
                    'c'
                ],
                [
                    ['d\/'],
                    []
                ]
            ];
            util.filter.apply({}, arr).should.deep.equal(['b/c/d.js', 'c/d.png']);
        });
        it('should throw error when given args not good', function () {
            let arr = [[
                'a/b.js',
                'b/c/d.js',
                'b/d/e.css',
                'c/d.png'
            ],
                [
                    'b',
                    'c'
                ],
                [
                    ['d\/']
                ]
            ];
            try {
                util.filter.apply({}, arr);
                throw new Error('should throw errors but actually not');
            }
            catch (e) {

            }
        });
    });
    describe('#get md5 value function', function () {
        let input = ['aaccasda', new Buffer([1, 2, 333])];
        it('should receive buffer or string and return a string with 7 character', function () {
            input.map(x=> {
                Array.from(util.md5Suffix(x)).should.has.length(7);
            });
        });
    });
    describe('#execute copy', function () {
        let defaultConfig = JSON.stringify(config);
        before(function () {
            config.setConfig({
                outdir: 'test' + os.partedSymbol + 'dd',
                rootPath: 'test'
            });
            let logDir = [process.cwd(), 'test', 'pss-log'].join(os.partedSymbol);
            config.setConfig({
                'logdir': logDir
            });

        });
        after(function () {
            config.setConfig(JSON.parse(defaultConfig));
            os.delCommad.map(x=> exec(x + ['test', 'dd', 'sample'].join(os.partedSymbol)));
            fs.rmdirSync('test/dd');
        });
        it('should correctly copy directory to dist', function (done) {
            util.executeCopy('sample', null, ()=> {
                let source = 'test' + os.partedSymbol + 'sample',
                    dist = ['test', 'dd', 'sample'].join(os.partedSymbol);
                path.listFiles(source).map(x=>x.slice(source.length)).should
                    .deep.equal(path.listFiles(dist).map(x=>x.slice(dist.length)));
                done();
            });

        });
    });
});

