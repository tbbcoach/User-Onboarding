/**
 * Created by aesop on 2016/2/9.
 */
'use strict';

const selectorParser = selector=> selector.trim().replace(/\s*>\s*/g, '>')
    .replace(/\s*\+\s*/g, '+')
    .replace(/\s+/g, ' ');

const expressionParser = expression=> {
    if (!expression) {
        return false;
    }
    let commaIndex = expression.indexOf(':');
    let property = expression.slice(0, commaIndex).trim(),
        value = expression.slice(commaIndex + 1).trim().replace(/\s+/g, ' ')
            .replace(/url\(\s*[^)]+\)/, item=>item.replace(/'|"/g, '').trim());
    return property + ':' + value;
};

const cleanAllComment = content=> {
    return content.replace(/\/\*[^(*\/)]+\*\//g, '');
};

const toLiteralCssUnits = content=> {
    content = cleanAllComment(content);
    let list = content.match(/[^}]+\}/g);
    return list.map(x=> {
        return x.slice(0, -1).trim().split('{').map(x=>x.trim());
    });
};

class CssUnit {
    constructor() {
    }

    set selectors(selectors) {
        let selectorArray = selectors.split(',');
        this._selectors = selectorArray.map(selectorParser);
    }

    get selectors() {
        return this._selectors.join(',');
    }

    get expressions() {
        return this._expressions.join(';');
    }

    set expressions(expressions) {
        let expressionArray = expressions.split(';');
        this._expressions = expressionArray.map(x=>expressionParser(x.trim())).filter(x=>!!x);
    }

    toString() {
        return this.selectors + '{' + this.expressions + '}';
    }
}


module.exports = function () {
    let literalCssUnits = toLiteralCssUnits(this.content);
    this.content = literalCssUnits.map(x=> {
        let cssUnit = new CssUnit();
        cssUnit.expressions = x[1];
        cssUnit.selectors = x[0];
        return cssUnit;
    }).join('');
};